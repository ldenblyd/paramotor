datasource db {
  provider = "postgresql"
  url      = env("PSQL_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  admin         Boolean?
  Brand         Brand[]
  Engine        Engine[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ClutchEnum {
  WITH
  WITOUT
  CHOOSE
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  validated Boolean  @default(false)
  Engine    Engine[]
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Engine {
  id             String      @id @default(cuid())
  model          String
  cylinderVolume Float
  description    String?
  imageUrl       String?
  pdf            String?
  reduction      Float[]
  power          Json?
  consumption    Json?
  Starter        Json[]
  clutch         ClutchEnum?
  brand          Brand       @relation(fields: [brandId], references: [id])
  brandId        String
  author         User        @relation(fields: [authorId], references: [id])
  authorId       String
}
